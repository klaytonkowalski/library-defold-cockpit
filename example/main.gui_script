--------------------------------------------------------------------------------
-- License
--------------------------------------------------------------------------------

-- Copyright (c) 2024 Klayton Kowalski

-- This software is provided 'as-is', without any express or implied warranty.
-- In no event will the authors be held liable for any damages arising from the use of this software.

-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it freely,
-- subject to the following restrictions:

-- 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
--    If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.

-- 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.

-- 3. This notice may not be removed or altered from any source distribution.

--------------------------------------------------------------------------------
-- Information
--------------------------------------------------------------------------------

-- GitHub: https://github.com/klaytonkowalski/library-defold-cockpit

--------------------------------------------------------------------------------
-- Dependencies
--------------------------------------------------------------------------------

local cockpit = require "cockpit.cockpit"

--------------------------------------------------------------------------------
-- Constants
--------------------------------------------------------------------------------

local message_acquire_input_focus = hash("acquire_input_focus")

local color_idle = vmath.vector4(0.7, 0.7, 0.7, 1)
local color_over = vmath.vector4(1, 1, 1, 1)
local color_down = vmath.vector4(0.7, 1, 0.7, 1)

-- The following GUI nodes are set in the `cache_nodes()` function.

local node_exit_button = nil

local node_bread_checkbox = nil
local node_eggs_checkbox = nil
local node_milk_checkbox = nil
local node_bread_logo = nil
local node_eggs_logo = nil
local node_milk_logo = nil

local node_red_radio = nil
local node_green_radio = nil
local node_blue_radio = nil
local node_red_logo = nil
local node_green_logo = nil
local node_blue_logo = nil

--------------------------------------------------------------------------------
-- Local Functions
--------------------------------------------------------------------------------

local function exit_button_callback()
	sys.exit(0)
end

local function bread_checkbox_callback()
	local checkbox_data = cockpit.get_checkbox_data(node_bread_checkbox)
	gui.set_visible(node_bread_logo, checkbox_data.checked)
end

local function eggs_checkbox_callback()
	local checkbox_data = cockpit.get_checkbox_data(node_eggs_checkbox)
	gui.set_visible(node_eggs_logo, checkbox_data.checked)
end

local function milk_checkbox_callback()
	local checkbox_data = cockpit.get_checkbox_data(node_milk_checkbox)
	gui.set_visible(node_milk_logo, checkbox_data.checked)
end

local function red_radio_callback()
	local radio_data = cockpit.get_radio_data(node_red_radio)
	gui.set_visible(node_red_logo, radio_data.checked)
end

local function green_radio_callback()
	local radio_data = cockpit.get_radio_data(node_green_radio)
	gui.set_visible(node_green_logo, radio_data.checked)
end

local function blue_radio_callback()
	local radio_data = cockpit.get_radio_data(node_blue_radio)
	gui.set_visible(node_blue_logo, radio_data.checked)
end

-- Triggered on any component state change.
local function component_callback(node, over, down, released)
	if over and down then
		gui.set_color(node, color_down)
	elseif over then
		gui.set_color(node, color_over)
	else
		gui.set_color(node, color_idle)
	end
	if released then
		if node == node_exit_button then
			exit_button_callback()
		elseif node == node_bread_checkbox then
			bread_checkbox_callback()
		elseif node == node_eggs_checkbox then
			eggs_checkbox_callback()
		elseif node == node_milk_checkbox then
			milk_checkbox_callback()
		elseif node == node_red_radio then
			red_radio_callback()
		elseif node == node_green_radio then
			green_radio_callback()
		elseif node == node_blue_radio then
			blue_radio_callback()
		end
	end
end

-- Caches each of the `node_` constants so that we don't have to repeatedly call `gui.get_node()`.
local function cache_nodes()
	node_exit_button = gui.get_node(hash("node_exit_button"))
	node_bread_checkbox = gui.get_node(hash("node_bread_checkbox"))
	node_eggs_checkbox = gui.get_node(hash("node_eggs_checkbox"))
	node_milk_checkbox = gui.get_node(hash("node_milk_checkbox"))
	node_bread_logo = gui.get_node(hash("node_bread_logo"))
	node_eggs_logo = gui.get_node(hash("node_eggs_logo"))
	node_milk_logo = gui.get_node(hash("node_milk_logo"))
	node_red_radio = gui.get_node(hash("node_red_radio"))
	node_green_radio = gui.get_node(hash("node_green_radio"))
	node_blue_radio = gui.get_node(hash("node_blue_radio"))
	node_red_logo = gui.get_node(hash("node_red_logo"))
	node_green_logo = gui.get_node(hash("node_green_logo"))
	node_blue_logo = gui.get_node(hash("node_blue_logo"))
end

-- Creates every component.
local function create_components()
	cockpit.create_button(node_exit_button, component_callback)
	cockpit.create_checkbox(node_bread_checkbox, component_callback)
	cockpit.create_checkbox(node_eggs_checkbox, component_callback)
	cockpit.create_checkbox(node_milk_checkbox, component_callback)
	cockpit.create_radio(node_red_radio, component_callback, 1)
	cockpit.create_radio(node_green_radio, component_callback, 1)
	cockpit.create_radio(node_blue_radio, component_callback, 1)
end

--------------------------------------------------------------------------------
-- Engine Functions
--------------------------------------------------------------------------------

function init()
	msg.post(msg.url(), message_acquire_input_focus)
	cache_nodes()
	create_components()
end

function on_input(_, action_id, action)
	cockpit.on_input(action_id, action)
end